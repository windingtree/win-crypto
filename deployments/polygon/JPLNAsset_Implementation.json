{
  "address": "0xB5E469Ed2C3Bf34ACC1Def8e61435F925a78e2d1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ledger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_wrapped",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonWrappedAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotUpgrader",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintOverflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "Deny",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Join",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "live",
          "type": "uint256"
        }
      ],
      "name": "Live",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "Rely",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract WrappedErc20Like",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "auth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "deny",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        }
      ],
      "name": "exitSelf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Permit.EIP2612Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "joinWrapped",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ledger",
      "outputs": [
        {
          "internalType": "contract LedgerLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "live",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ledger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_wrapped",
          "type": "uint256"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "rely",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgrader",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b4c8d628e12d2fa7b71543bfb068a9f9c0eb8fb1dbcb57d7221ae94e534523c",
  "receipt": {
    "to": null,
    "from": "0xfA234A21AF15AF7D6B2F55FCa2e71971aa5fD02f",
    "contractAddress": "0xB5E469Ed2C3Bf34ACC1Def8e61435F925a78e2d1",
    "transactionIndex": 22,
    "gasUsed": "951121",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000001000000000000c000000200000000000000000000000000400000000000000000000000800000000000400000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000040000000000000200000000000000900000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000010000000004000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x5b0d8d29909aa651f61bee41b7fa510a479ff0dc23d610b7171e27129a7e2853",
    "transactionHash": "0x2b4c8d628e12d2fa7b71543bfb068a9f9c0eb8fb1dbcb57d7221ae94e534523c",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 32802438,
        "transactionHash": "0x2b4c8d628e12d2fa7b71543bfb068a9f9c0eb8fb1dbcb57d7221ae94e534523c",
        "address": "0xB5E469Ed2C3Bf34ACC1Def8e61435F925a78e2d1",
        "topics": [
          "0xdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60"
        ],
        "data": "0x000000000000000000000000fa234a21af15af7d6b2f55fca2e71971aa5fd02f",
        "logIndex": 77,
        "blockHash": "0x5b0d8d29909aa651f61bee41b7fa510a479ff0dc23d610b7171e27129a7e2853"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 32802438,
        "transactionHash": "0x2b4c8d628e12d2fa7b71543bfb068a9f9c0eb8fb1dbcb57d7221ae94e534523c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fa234a21af15af7d6b2f55fca2e71971aa5fd02f",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000c3fc4aa53cdc3400000000000000000000000000000000000000000000000013e007e0ab8aa5980000000000000000000000000000000000000000000171199eed2a556fb157ae000000000000000000000000000000000000000000000000131c0b96064dc9640000000000000000000000000000000000000000000171199fb126a014ee33e2",
        "logIndex": 78,
        "blockHash": "0x5b0d8d29909aa651f61bee41b7fa510a479ff0dc23d610b7171e27129a7e2853"
      }
    ],
    "blockNumber": 32802438,
    "cumulativeGasUsed": "3877245",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc2024b4Ff3764b8AEb5FCfB4f248124B80A2367a",
    "0x08E6d1F0c4877Ef2993Ad733Fc6F1D022d0E9DBf",
    0
  ],
  "numDeployments": 2,
  "solcInputHash": "e221dcf2e4f4028665ec932caff4036c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ledger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wrapped\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonWrappedAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotUpgrader\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintOverflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"live\",\"type\":\"uint256\"}],\"name\":\"Live\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract WrappedErc20Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"exitSelf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Permit.EIP2612Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"joinWrapped\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"contract LedgerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ledger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wrapped\",\"type\":\"uint256\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidValue()\":[{\"details\":\"Throws when invalid value provided\"}],\"NonWrappedAsset()\":[{\"details\":\"Throws when called wrapped associated function on the non-wrapped asset\"}],\"NotAuthorized()\":[{\"details\":\"Throws when action is not authorized\"}],\"NotLive()\":[{\"details\":\"Throws if the contract called when it is not live\"}],\"NotUpgrader()\":[{\"details\":\"Throws when function called not by upgrader\"}],\"TransferFailed(address,address,address,uint256)\":[{\"details\":\"Throws when transfer is failed\"}],\"UintOverflow()\":[{\"details\":\"Throws when uint265 value overflow\"}]},\"kind\":\"dev\",\"methods\":{\"deny(address)\":{\"details\":\"Removes authorized party\"},\"exit(address,uint256)\":{\"details\":\"Withdraws funds\",\"params\":{\"dst\":\"Asset destination address (balance owner)\",\"value\":\"Asset value\"}},\"exitSelf(address)\":{\"details\":\"Withdraws self owned funds\",\"params\":{\"dst\":\"Asset destination address (balance owner)\"}},\"join(address,address,uint256)\":{\"details\":\"Joins ERC20 compatible assets directly from known address\",\"params\":{\"dst\":\"Asset destination address (balance owner)\",\"src\":\"Asset owner address\",\"value\":\"Asset value\"}},\"join(address,address,uint256,(address,uint256,uint8,bytes32,bytes32))\":{\"details\":\"Joins ERC20 compatible assets directly from known address with permit\",\"params\":{\"dst\":\"Asset destination address (balance owner)\",\"src\":\"Asset owner address\",\"value\":\"Asset value\"}},\"join(address,uint256)\":{\"details\":\"Joins ERC20 compatible assets directly from sender\",\"params\":{\"dst\":\"Asset destination address (balance owner)\",\"value\":\"Asset value\"}},\"joinWrapped(address,uint256)\":{\"details\":\"Joins ERC20 compatible assets directly from sender\",\"params\":{\"dst\":\"Asset destination address (balance owner)\",\"value\":\"Asset value\"}},\"rely(address)\":{\"details\":\"Adds authorized party\"},\"toggle()\":{\"details\":\"Toggles the contract live flag\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgradeable/AssetUpgradeable.sol\":\"AssetUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {Manageable} from './Manageable.sol';\\nimport {Permit} from './libraries/Permit.sol';\\nimport {LedgerLike, WrappedErc20Like} from './interfaces/Common.sol';\\n\\ncontract Asset is Manageable {\\n  /// @dev Reference to Ledger contract\\n  LedgerLike public ledger;\\n\\n  /// @dev Reference to asset contract\\n  WrappedErc20Like public asset;\\n\\n  /// @dev Flag if the asset is wrapped\\n  uint256 public wrapped;\\n\\n  // --- errors\\n\\n  /// @dev Throws when uint265 value overflow\\n  error UintOverflow();\\n\\n  /// @dev Throws when transfer is failed\\n  error TransferFailed(address src, address dst, address asset, uint256 value);\\n\\n  /// @dev Throws when called wrapped associated function on the non-wrapped asset\\n  error NonWrappedAsset();\\n\\n  /// @dev Throws when invalid value provided\\n  error InvalidValue();\\n\\n  // --- events\\n\\n  /// @dev Emitted when asset joined\\n  event Join(address src, uint256 value);\\n\\n  /// @dev Emitted when asset has been withdrawn\\n  event Exit(address dst, uint256 value);\\n\\n  constructor(\\n    address _ledger,\\n    address _asset,\\n    uint256 _wrapped\\n  ) {\\n    auth[msg.sender] = 1;\\n    live = 1;\\n    ledger = LedgerLike(_ledger);\\n    wrapped = _wrapped;\\n    asset = WrappedErc20Like(_asset);\\n    emit Rely(msg.sender);\\n  }\\n\\n  function _join(\\n    address src,\\n    address dst,\\n    uint256 value\\n  ) internal {\\n    if (int256(value) < 0) {\\n      revert UintOverflow();\\n    }\\n    ledger.add(dst, address(asset), int256(value));\\n    if (src != address(this)) {\\n      if (!asset.transferFrom(src, address(this), value)) {\\n        revert TransferFailed(src, dst, address(asset), value);\\n      }\\n    }\\n    emit Join(dst, value);\\n  }\\n\\n  /// @dev Joins ERC20 compatible assets directly from sender\\n  /// @param dst Asset destination address (balance owner)\\n  /// @param value Asset value\\n  function join(address dst, uint256 value) external onlyLive {\\n    _join(msg.sender, dst, value);\\n  }\\n\\n  /// @dev Joins ERC20 compatible assets directly from known address\\n  /// @param src Asset owner address\\n  /// @param dst Asset destination address (balance owner)\\n  /// @param value Asset value\\n  function join(\\n    address src,\\n    address dst,\\n    uint256 value\\n  ) external onlyLive {\\n    _join(src, dst, value);\\n  }\\n\\n  /// @dev Joins ERC20 compatible assets directly from known address with permit\\n  /// @param src Asset owner address\\n  /// @param dst Asset destination address (balance owner)\\n  /// @param value Asset value\\n  function join(\\n    address src,\\n    address dst,\\n    uint256 value,\\n    Permit.EIP2612Permit calldata permit\\n  ) external onlyLive {\\n    asset.permit(src, address(this), value, permit.deadline, permit.v, permit.r, permit.s);\\n    _join(src, dst, value);\\n  }\\n\\n  /// @dev Joins ERC20 compatible assets directly from sender\\n  /// @param dst Asset destination address (balance owner)\\n  /// @param value Asset value\\n  function joinWrapped(address dst, uint256 value) external payable onlyLive {\\n    if (wrapped == 0) {\\n      revert NonWrappedAsset();\\n    }\\n    if (msg.value != value) {\\n      revert InvalidValue();\\n    }\\n    asset.deposit{value: msg.value}();\\n    _join(address(this), dst, value);\\n  }\\n\\n  /// @dev Withdraws funds\\n  /// @param dst Asset destination address (balance owner)\\n  /// @param value Asset value\\n  function exit(address dst, uint256 value) external onlyLive {\\n    if (value > 2**255) {\\n      revert UintOverflow();\\n    }\\n    ledger.add(msg.sender, address(asset), -int256(value));\\n    if (!asset.transfer(dst, value)) {\\n      revert TransferFailed(address(this), dst, address(asset), value);\\n    }\\n    emit Exit(dst, value);\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0ab18b8f1ee155b21eba3b50737ef2b3a170cb906e3cd8532f834789f5976351\",\"license\":\"GPL-3.0-only\"},\"contracts/ExitSelfable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {Asset} from './Asset.sol';\\n\\nabstract contract ExitSelfable is Asset {\\n\\n  /// @dev Withdraws self owned funds\\n  /// @param dst Asset destination address (balance owner)\\n  function exitSelf(address dst) external authorized {\\n    uint256 selfBalance = asset.balanceOf(address(this));\\n    if (!asset.transfer(dst, selfBalance)) {\\n      revert TransferFailed(address(this), dst, address(asset), selfBalance);\\n    }\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd7abbd4c8909978231d0b0114180ffb35ead3406e73fcf6d3c8d4d32c97311fb\",\"license\":\"GPL-3.0-only\"},\"contracts/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nabstract contract Manageable {\\n  /// @dev Active flag\\n  uint256 public live;\\n\\n  /// @dev Authorized parties\\n  mapping(address => uint256) public auth;\\n\\n  // -- errors\\n\\n  /// @dev Throws if the contract called when it is not live\\n  error NotLive();\\n\\n  /// @dev Throws when action is not authorized\\n  error NotAuthorized();\\n\\n  // -- events\\n\\n  /// @dev Emitted when the contract live flag is changed\\n  event Live(uint256 live);\\n\\n  /// @dev Emitted when a party is authorized\\n  event Rely(address party);\\n\\n  /// @dev Emitted when a party is denied\\n  event Deny(address party);\\n\\n  // --- modifiers\\n\\n  /// @dev Checks if the sender is authorized\\n  modifier authorized() {\\n    if (auth[msg.sender] != 1) {\\n      revert NotAuthorized();\\n    }\\n    _;\\n  }\\n\\n  /// @dev Checks is the contract live\\n  modifier onlyLive() {\\n    if (live == 0) {\\n      revert NotLive();\\n    }\\n    _;\\n  }\\n\\n  // --- admin\\n\\n  /// @dev Toggles the contract live flag\\n  function toggle() external authorized {\\n    if (live == 1) {\\n      live = 0;\\n    } else {\\n      live = 1;\\n    }\\n    emit Live(live);\\n  }\\n\\n  /// @dev Adds authorized party\\n  function rely(address party) external authorized {\\n    auth[party] = 1;\\n    emit Rely(party);\\n  }\\n\\n  /// @dev Removes authorized party\\n  function deny(address party) external authorized {\\n    auth[party] = 0;\\n    emit Deny(party);\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb90e97de9f804b5eb380e9dee4a419d55463f7760ccf9ee703d93776e290e4f4\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/Common.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {Permit} from '../libraries/Permit.sol';\\n\\ninterface LedgerLike {\\n  function balances(address dst, address asset) external returns (uint256);\\n\\n  function add(\\n    address,\\n    address,\\n    int256\\n  ) external;\\n\\n  function move(\\n    address src,\\n    address dst,\\n    address asset,\\n    uint256 value\\n  ) external;\\n}\\n\\ninterface Erc20Like {\\n  function decimals() external view returns (uint256);\\n\\n  function transfer(address, uint256) external returns (bool);\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) external returns (bool);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\\ninterface WrappedErc20Like is Erc20Like {\\n  function balanceOf(address) external returns (uint256);\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\\ninterface AssetLike {\\n  function ledger() external returns (address);\\n\\n  function asset() external returns (address);\\n\\n  function wrapped() external returns (uint256);\\n\\n  function join(address dst, uint256 value) external;\\n\\n  function join(\\n    address src,\\n    address dst,\\n    uint256 value\\n  ) external;\\n\\n  function join(\\n    address src,\\n    address dst,\\n    uint256 value,\\n    Permit.EIP2612Permit memory permit\\n  ) external;\\n\\n  function joinWrapped(address dst, uint256 value) external payable;\\n\\n  function exit(address dst, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x68cb6ae9569d47414db6a833e73d38892f8c46722244c2a08be9f6998b090bce\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nlibrary Permit {\\n  struct EIP2612Permit {\\n    address owner;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xdb44faa5762bf9d8033a50f81040f9a922ed5b415a90bc85deef6ce9713dcd66\",\"license\":\"GPL-3.0-only\"},\"contracts/upgradeable/AssetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {ExitSelfable} from '../ExitSelfable.sol';\\nimport {AssetUpgradeableV1} from './AssetUpgradeableV1.sol';\\n\\ncontract AssetUpgradeable is AssetUpgradeableV1, ExitSelfable {\\n  constructor(\\n    address _ledger,\\n    address _asset,\\n    uint256 _wrapped\\n  ) AssetUpgradeableV1(_ledger, _asset, _wrapped) {}\\n\\n  function postUpgrade() public onlyUpgrader {}\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7a01182f9186fbe2cdcb6b72e112867e8f8bbea25bdc8a7ff63ddaeb6a6f6679\",\"license\":\"GPL-3.0-only\"},\"contracts/upgradeable/AssetUpgradeableV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {Asset} from '../Asset.sol';\\nimport {LedgerLike, WrappedErc20Like} from '../interfaces/Common.sol';\\nimport {Upgradeable} from './Upgradeable.sol';\\n\\ncontract AssetUpgradeableV1 is Upgradeable, Asset {\\n  constructor(\\n    address _ledger,\\n    address _asset,\\n    uint256 _wrapped\\n  ) Asset(_ledger, _asset, _wrapped) {}\\n\\n  function postUpgrade(\\n    address _ledger,\\n    address _asset,\\n    uint256 _wrapped\\n  ) public onlyUpgrader {\\n    auth[msg.sender] = 1;\\n    live = 1;\\n    ledger = LedgerLike(_ledger);\\n    wrapped = _wrapped;\\n    asset = WrappedErc20Like(_asset);\\n    emit Rely(msg.sender);\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x875971e5217b4d42edda957fd20a89861682dcd1e0694d59858fd703f4c40292\",\"license\":\"GPL-3.0-only\"},\"contracts/upgradeable/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nabstract contract Upgradeable {\\n  address public upgrader;\\n\\n  /// @dev Throws when function called not by upgrader\\n  error NotUpgrader();\\n\\n  /// @dev Checks is the caller is upgrader\\n  modifier onlyUpgrader() {\\n    if (upgrader == address(0)) {\\n      upgrader = msg.sender;\\n    }\\n    if (msg.sender != upgrader) {\\n      revert NotUpgrader();\\n    }\\n    _;\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd2af52add71b029d9a17e22cbac85e5b052de945fc42636e2802e10e6045b107\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610fad380380610fad83398101604081905261002f916100e6565b33600081815260346020908152604091829020600190819055603355606780546001600160a01b038881166001600160a01b0319928316179092556069869055606880549288169290911691909117905590519182528491849184918491849184917fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60910160405180910390a1505050505050505050610122565b80516001600160a01b03811681146100e157600080fd5b919050565b6000806000606084860312156100fb57600080fd5b610104846100ca565b9250610112602085016100ca565b9150604084015190509250925092565b610e7c806101316000396000f3fe6080604052600436106100fe5760003560e01c80635e7ac5b7116100955780639c52a7f1116100645780639c52a7f1146102795780639f6c3dbd14610299578063af269745146102b9578063cd5d2118146102d9578063ef693bed1461030657600080fd5b80635e7ac5b71461020357806365fae35e1461022357806374beba3e14610243578063957aa58c1461026357600080fd5b80633b4da69f116100d15780633b4da69f1461018a57806340a3d246146101aa57806350e70d48146101bf57806356397c35146101e357600080fd5b806318e1c6fc146101035780632c53bc64146101185780632f1e6f471461012d57806338d52e0f1461014d575b600080fd5b610116610111366004610cb4565b610326565b005b34801561012457600080fd5b50610116610404565b34801561013957600080fd5b50610116610148366004610cde565b610454565b34801561015957600080fd5b5060685461016d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019657600080fd5b506101166101a5366004610cb4565b61053c565b3480156101b657600080fd5b5061011661056a565b3480156101cb57600080fd5b506101d560695481565b604051908152602001610181565b3480156101ef57600080fd5b5060675461016d906001600160a01b031681565b34801561020f57600080fd5b5061011661021e366004610d36565b6105f1565b34801561022f57600080fd5b5061011661023e366004610d36565b610742565b34801561024f57600080fd5b5061011661025e366004610d58565b6107c6565b34801561026f57600080fd5b506101d560335481565b34801561028557600080fd5b50610116610294366004610d36565b61089b565b3480156102a557600080fd5b506101166102b4366004610d58565b610917565b3480156102c557600080fd5b5060005461016d906001600160a01b031681565b3480156102e557600080fd5b506101d56102f4366004610d36565b60346020526000908152604090205481565b34801561031257600080fd5b50610116610321366004610cb4565b61094a565b6033546000036103495760405163baf13b3f60e01b815260040160405180910390fd5b60695460000361036c576040516326f6e52360e01b815260040160405180910390fd5b80341461038c57604051632a9ffab760e21b815260040160405180910390fd5b606860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103dc57600080fd5b505af11580156103f0573d6000803e3d6000fd5b5050505050610400308383610b0a565b5050565b6000546001600160a01b031661042757600080546001600160a01b031916331790555b6000546001600160a01b031633146104525760405163520ba28160e11b815260040160405180910390fd5b565b6033546000036104775760405163baf13b3f60e01b815260040160405180910390fd5b6068546001600160a01b031663d505accf85308560208601356104a06060880160408901610d94565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff166084820152606084013560a4820152608084013560c482015260e401600060405180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b50505050610536848484610b0a565b50505050565b60335460000361055f5760405163baf13b3f60e01b815260040160405180910390fd5b610400338383610b0a565b3360009081526034602052604090205460011461059a5760405163ea8e4eb560e01b815260040160405180910390fd5b6033546001036105ae5760006033556105b4565b60016033555b7f6b00bc0a71d2071ceffc66d2746ca7c3b550c2d5115a690a8761f81f04e2cf806033546040516105e791815260200190565b60405180910390a1565b336000908152603460205260409020546001146106215760405163ea8e4eb560e01b815260040160405180910390fd5b6068546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024016020604051808303816000875af115801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610db7565b60685460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af11580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190610dd0565b6104005760685460405163cd3f165960e01b815261073991309185916001600160a01b0316908590600401610df2565b60405180910390fd5b336000908152603460205260409020546001146107725760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166000818152603460209081526040918290206001905590519182527fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091015b60405180910390a150565b6000546001600160a01b03166107e957600080546001600160a01b031916331790555b6000546001600160a01b031633146108145760405163520ba28160e11b815260040160405180910390fd5b33600081815260346020908152604091829020600190819055603355606780546001600160a01b038881166001600160a01b0319928316179092556069869055606880549288169290911691909117905590519182527fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091015b60405180910390a1505050565b336000908152603460205260409020546001146108cb5760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b03811660008181526034602090815260408083209290925590519182527f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b91016107bb565b60335460000361093a5760405163baf13b3f60e01b815260040160405180910390fd5b610945838383610b0a565b505050565b60335460000361096d5760405163baf13b3f60e01b815260040160405180910390fd5b600160ff1b8111156109925760405163d72f3afd60e01b815260040160405180910390fd5b6067546068546001600160a01b039182169163b6885669913391166109b685610e1c565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505060685460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb91506044016020604051808303816000875af1158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190610dd0565b610ac45760685460405163cd3f165960e01b815261073991309185916001600160a01b0316908590600401610df2565b604080516001600160a01b0384168152602081018390527f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b299631910160405180910390a15050565b6000811215610b2c5760405163d72f3afd60e01b815260040160405180910390fd5b60675460685460405163b688566960e01b81526001600160a01b03858116600483015291821660248201526044810184905291169063b688566990606401600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b505050506001600160a01b0383163014610c59576068546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201849052909116906323b872dd906064016020604051808303816000875af1158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190610dd0565b610c595760685460405163cd3f165960e01b815261073991859185916001600160a01b0316908590600401610df2565b604080516001600160a01b0384168152602081018390527fb4e09949657f21548b58afe74e7b86cd2295da5ff1598ae1e5faecb1cf19ca95910161088e565b80356001600160a01b0381168114610caf57600080fd5b919050565b60008060408385031215610cc757600080fd5b610cd083610c98565b946020939093013593505050565b600080600080848603610100811215610cf657600080fd5b610cff86610c98565b9450610d0d60208701610c98565b93506040860135925060a0605f1982011215610d2857600080fd5b509295919450926060019150565b600060208284031215610d4857600080fd5b610d5182610c98565b9392505050565b600080600060608486031215610d6d57600080fd5b610d7684610c98565b9250610d8460208501610c98565b9150604084013590509250925092565b600060208284031215610da657600080fd5b813560ff81168114610d5157600080fd5b600060208284031215610dc957600080fd5b5051919050565b600060208284031215610de257600080fd5b81518015158114610d5157600080fd5b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000600160ff1b8201610e3f57634e487b7160e01b600052601160045260246000fd5b506000039056fea264697066735822122083586ea3ee2f6eb0b2639880ebd3a250f9f753acf29dc03c62b6c229e1c6fa7264736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c80635e7ac5b7116100955780639c52a7f1116100645780639c52a7f1146102795780639f6c3dbd14610299578063af269745146102b9578063cd5d2118146102d9578063ef693bed1461030657600080fd5b80635e7ac5b71461020357806365fae35e1461022357806374beba3e14610243578063957aa58c1461026357600080fd5b80633b4da69f116100d15780633b4da69f1461018a57806340a3d246146101aa57806350e70d48146101bf57806356397c35146101e357600080fd5b806318e1c6fc146101035780632c53bc64146101185780632f1e6f471461012d57806338d52e0f1461014d575b600080fd5b610116610111366004610cb4565b610326565b005b34801561012457600080fd5b50610116610404565b34801561013957600080fd5b50610116610148366004610cde565b610454565b34801561015957600080fd5b5060685461016d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561019657600080fd5b506101166101a5366004610cb4565b61053c565b3480156101b657600080fd5b5061011661056a565b3480156101cb57600080fd5b506101d560695481565b604051908152602001610181565b3480156101ef57600080fd5b5060675461016d906001600160a01b031681565b34801561020f57600080fd5b5061011661021e366004610d36565b6105f1565b34801561022f57600080fd5b5061011661023e366004610d36565b610742565b34801561024f57600080fd5b5061011661025e366004610d58565b6107c6565b34801561026f57600080fd5b506101d560335481565b34801561028557600080fd5b50610116610294366004610d36565b61089b565b3480156102a557600080fd5b506101166102b4366004610d58565b610917565b3480156102c557600080fd5b5060005461016d906001600160a01b031681565b3480156102e557600080fd5b506101d56102f4366004610d36565b60346020526000908152604090205481565b34801561031257600080fd5b50610116610321366004610cb4565b61094a565b6033546000036103495760405163baf13b3f60e01b815260040160405180910390fd5b60695460000361036c576040516326f6e52360e01b815260040160405180910390fd5b80341461038c57604051632a9ffab760e21b815260040160405180910390fd5b606860009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103dc57600080fd5b505af11580156103f0573d6000803e3d6000fd5b5050505050610400308383610b0a565b5050565b6000546001600160a01b031661042757600080546001600160a01b031916331790555b6000546001600160a01b031633146104525760405163520ba28160e11b815260040160405180910390fd5b565b6033546000036104775760405163baf13b3f60e01b815260040160405180910390fd5b6068546001600160a01b031663d505accf85308560208601356104a06060880160408901610d94565b6040516001600160e01b031960e088901b1681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff166084820152606084013560a4820152608084013560c482015260e401600060405180830381600087803b15801561051357600080fd5b505af1158015610527573d6000803e3d6000fd5b50505050610536848484610b0a565b50505050565b60335460000361055f5760405163baf13b3f60e01b815260040160405180910390fd5b610400338383610b0a565b3360009081526034602052604090205460011461059a5760405163ea8e4eb560e01b815260040160405180910390fd5b6033546001036105ae5760006033556105b4565b60016033555b7f6b00bc0a71d2071ceffc66d2746ca7c3b550c2d5115a690a8761f81f04e2cf806033546040516105e791815260200190565b60405180910390a1565b336000908152603460205260409020546001146106215760405163ea8e4eb560e01b815260040160405180910390fd5b6068546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a08231906024016020604051808303816000875af115801561066c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106909190610db7565b60685460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af11580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190610dd0565b6104005760685460405163cd3f165960e01b815261073991309185916001600160a01b0316908590600401610df2565b60405180910390fd5b336000908152603460205260409020546001146107725760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166000818152603460209081526040918290206001905590519182527fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091015b60405180910390a150565b6000546001600160a01b03166107e957600080546001600160a01b031916331790555b6000546001600160a01b031633146108145760405163520ba28160e11b815260040160405180910390fd5b33600081815260346020908152604091829020600190819055603355606780546001600160a01b038881166001600160a01b0319928316179092556069869055606880549288169290911691909117905590519182527fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091015b60405180910390a1505050565b336000908152603460205260409020546001146108cb5760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b03811660008181526034602090815260408083209290925590519182527f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b91016107bb565b60335460000361093a5760405163baf13b3f60e01b815260040160405180910390fd5b610945838383610b0a565b505050565b60335460000361096d5760405163baf13b3f60e01b815260040160405180910390fd5b600160ff1b8111156109925760405163d72f3afd60e01b815260040160405180910390fd5b6067546068546001600160a01b039182169163b6885669913391166109b685610e1c565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610a0557600080fd5b505af1158015610a19573d6000803e3d6000fd5b505060685460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb91506044016020604051808303816000875af1158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190610dd0565b610ac45760685460405163cd3f165960e01b815261073991309185916001600160a01b0316908590600401610df2565b604080516001600160a01b0384168152602081018390527f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b299631910160405180910390a15050565b6000811215610b2c5760405163d72f3afd60e01b815260040160405180910390fd5b60675460685460405163b688566960e01b81526001600160a01b03858116600483015291821660248201526044810184905291169063b688566990606401600060405180830381600087803b158015610b8457600080fd5b505af1158015610b98573d6000803e3d6000fd5b505050506001600160a01b0383163014610c59576068546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201849052909116906323b872dd906064016020604051808303816000875af1158015610c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c299190610dd0565b610c595760685460405163cd3f165960e01b815261073991859185916001600160a01b0316908590600401610df2565b604080516001600160a01b0384168152602081018390527fb4e09949657f21548b58afe74e7b86cd2295da5ff1598ae1e5faecb1cf19ca95910161088e565b80356001600160a01b0381168114610caf57600080fd5b919050565b60008060408385031215610cc757600080fd5b610cd083610c98565b946020939093013593505050565b600080600080848603610100811215610cf657600080fd5b610cff86610c98565b9450610d0d60208701610c98565b93506040860135925060a0605f1982011215610d2857600080fd5b509295919450926060019150565b600060208284031215610d4857600080fd5b610d5182610c98565b9392505050565b600080600060608486031215610d6d57600080fd5b610d7684610c98565b9250610d8460208501610c98565b9150604084013590509250925092565b600060208284031215610da657600080fd5b813560ff81168114610d5157600080fd5b600060208284031215610dc957600080fd5b5051919050565b600060208284031215610de257600080fd5b81518015158114610d5157600080fd5b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000600160ff1b8201610e3f57634e487b7160e01b600052601160045260246000fd5b506000039056fea264697066735822122083586ea3ee2f6eb0b2639880ebd3a250f9f753acf29dc03c62b6c229e1c6fa7264736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "InvalidValue()": [
        {
          "details": "Throws when invalid value provided"
        }
      ],
      "NonWrappedAsset()": [
        {
          "details": "Throws when called wrapped associated function on the non-wrapped asset"
        }
      ],
      "NotAuthorized()": [
        {
          "details": "Throws when action is not authorized"
        }
      ],
      "NotLive()": [
        {
          "details": "Throws if the contract called when it is not live"
        }
      ],
      "NotUpgrader()": [
        {
          "details": "Throws when function called not by upgrader"
        }
      ],
      "TransferFailed(address,address,address,uint256)": [
        {
          "details": "Throws when transfer is failed"
        }
      ],
      "UintOverflow()": [
        {
          "details": "Throws when uint265 value overflow"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "deny(address)": {
        "details": "Removes authorized party"
      },
      "exit(address,uint256)": {
        "details": "Withdraws funds",
        "params": {
          "dst": "Asset destination address (balance owner)",
          "value": "Asset value"
        }
      },
      "exitSelf(address)": {
        "details": "Withdraws self owned funds",
        "params": {
          "dst": "Asset destination address (balance owner)"
        }
      },
      "join(address,address,uint256)": {
        "details": "Joins ERC20 compatible assets directly from known address",
        "params": {
          "dst": "Asset destination address (balance owner)",
          "src": "Asset owner address",
          "value": "Asset value"
        }
      },
      "join(address,address,uint256,(address,uint256,uint8,bytes32,bytes32))": {
        "details": "Joins ERC20 compatible assets directly from known address with permit",
        "params": {
          "dst": "Asset destination address (balance owner)",
          "src": "Asset owner address",
          "value": "Asset value"
        }
      },
      "join(address,uint256)": {
        "details": "Joins ERC20 compatible assets directly from sender",
        "params": {
          "dst": "Asset destination address (balance owner)",
          "value": "Asset value"
        }
      },
      "joinWrapped(address,uint256)": {
        "details": "Joins ERC20 compatible assets directly from sender",
        "params": {
          "dst": "Asset destination address (balance owner)",
          "value": "Asset value"
        }
      },
      "rely(address)": {
        "details": "Adds authorized party"
      },
      "toggle()": {
        "details": "Toggles the contract live flag"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1584,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "upgrader",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1618,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 576,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "live",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 581,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "auth",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 698,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "ledger",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(LedgerLike)1291"
      },
      {
        "astId": 18,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "asset",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(WrappedErc20Like)1352"
      },
      {
        "astId": 21,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "wrapped",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 357,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1536,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 408,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1459,
        "contract": "contracts/upgradeable/AssetUpgradeable.sol:AssetUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "256",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_contract(LedgerLike)1291": {
        "encoding": "inplace",
        "label": "contract LedgerLike",
        "numberOfBytes": "20"
      },
      "t_contract(WrappedErc20Like)1352": {
        "encoding": "inplace",
        "label": "contract WrappedErc20Like",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}