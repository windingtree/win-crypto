{
  "address": "0x6eFDbcF36498f39E920fa9E084578E0E7d180051",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ledger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BalanceNotEnough",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        }
      ],
      "name": "DealAlreadyRefunded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        }
      ],
      "name": "DealExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "DealExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        }
      ],
      "name": "DealNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotUpgrader",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProviderExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        }
      ],
      "name": "ProviderNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        }
      ],
      "name": "Deal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "Deny",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "live",
          "type": "uint256"
        }
      ],
      "name": "Live",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "Provider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "Rely",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "auth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Permit.EIP2612Permit",
          "name": "permit",
          "type": "tuple"
        }
      ],
      "name": "deal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "deal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "deals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "customer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "enum WinPay.State",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "deny",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ledger",
      "outputs": [
        {
          "internalType": "contract LedgerLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "live",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ledger",
          "type": "address"
        }
      ],
      "name": "postUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "providers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serviceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "rely",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "provider",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "updateProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgrader",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x477ac996ff38c926144114235c2cea6cef8925c208d66ae1259011912f5180f9",
  "receipt": {
    "to": null,
    "from": "0xfA234A21AF15AF7D6B2F55FCa2e71971aa5fD02f",
    "contractAddress": "0x6eFDbcF36498f39E920fa9E084578E0E7d180051",
    "transactionIndex": 0,
    "gasUsed": "1056166",
    "logsBloom": "0x
    "blockHash": "0xa95a22fe8e6b40ee57379a89b573dea1107e12533042f0f34d951a3ca4ad307d",
    "transactionHash": "0x477ac996ff38c926144114235c2cea6cef8925c208d66ae1259011912f5180f9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24078914,
        "transactionHash": "0x477ac996ff38c926144114235c2cea6cef8925c208d66ae1259011912f5180f9",
        "address": "0x6eFDbcF36498f39E920fa9E084578E0E7d180051",
        "topics": [
          "0xdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60"
        ],
        "data": "0x000000000000000000000000fa234a21af15af7d6b2f55fca2e71971aa5fd02f",
        "logIndex": 0,
        "blockHash": "0xa95a22fe8e6b40ee57379a89b573dea1107e12533042f0f34d951a3ca4ad307d"
      }
    ],
    "blockNumber": 24078914,
    "cumulativeGasUsed": "1056166",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc2024b4Ff3764b8AEb5FCfB4f248124B80A2367a"
  ],
  "numDeployments": 2,
  "solcInputHash": "e221dcf2e4f4028665ec932caff4036c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ledger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BalanceNotEnough\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"name\":\"DealAlreadyRefunded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"name\":\"DealExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"DealExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"name\":\"DealNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotUpgrader\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProviderExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"}],\"name\":\"ProviderNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"name\":\"Deal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"live\",\"type\":\"uint256\"}],\"name\":\"Live\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"Provider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Permit.EIP2612Permit\",\"name\":\"permit\",\"type\":\"tuple\"}],\"name\":\"deal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"deal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"enum WinPay.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ledger\",\"outputs\":[{\"internalType\":\"contract LedgerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ledger\",\"type\":\"address\"}],\"name\":\"postUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"provider\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updateProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"BalanceNotEnough()\":[{\"details\":\"Throws when balance not enough for payment\"}],\"DealAlreadyRefunded(bytes32)\":[{\"details\":\"Throws when the deal is already refunded\"}],\"DealExists(bytes32)\":[{\"details\":\"Throws when the deal is already initialized\"}],\"DealExpired(bytes32,uint256)\":[{\"details\":\"Throws when the deal is expired\"}],\"DealNotFound(bytes32)\":[{\"details\":\"Throws when the deal not found\"}],\"InvalidValue()\":[{\"details\":\"Throws when invalid value provided\"}],\"NotAuthorized()\":[{\"details\":\"Throws when action is not authorized\"}],\"NotLive()\":[{\"details\":\"Throws if the contract called when it is not live\"}],\"NotUpgrader()\":[{\"details\":\"Throws when function called not by upgrader\"}],\"ProviderExists()\":[{\"details\":\"Throws when provider is already registered\"}],\"ProviderNotFound(bytes32)\":[{\"details\":\"Throws when provider not found\"}]},\"kind\":\"dev\",\"methods\":{\"deny(address)\":{\"details\":\"Removes authorized party\"},\"refund(bytes32,address)\":{\"details\":\"Refunds a deal\",\"params\":{\"asset\":\"The Asset contract reference\",\"serviceId\":\"Unique service Id\"}},\"register(bytes32,address)\":{\"details\":\"Register a new provider\",\"params\":{\"provider\":\"Unique provider Id\",\"wallet\":\"Provider's wallet\"}},\"rely(address)\":{\"details\":\"Adds authorized party\"},\"toggle()\":{\"details\":\"Toggles the contract live flag\"},\"updateProvider(bytes32,address)\":{\"details\":\"Update the provider\",\"params\":{\"provider\":\"Unique provider Id\",\"wallet\":\"Provider's wallet\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgradeable/WinPayUpgradeable.sol\":\"WinPayUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Manageable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nabstract contract Manageable {\\n  /// @dev Active flag\\n  uint256 public live;\\n\\n  /// @dev Authorized parties\\n  mapping(address => uint256) public auth;\\n\\n  // -- errors\\n\\n  /// @dev Throws if the contract called when it is not live\\n  error NotLive();\\n\\n  /// @dev Throws when action is not authorized\\n  error NotAuthorized();\\n\\n  // -- events\\n\\n  /// @dev Emitted when the contract live flag is changed\\n  event Live(uint256 live);\\n\\n  /// @dev Emitted when a party is authorized\\n  event Rely(address party);\\n\\n  /// @dev Emitted when a party is denied\\n  event Deny(address party);\\n\\n  // --- modifiers\\n\\n  /// @dev Checks if the sender is authorized\\n  modifier authorized() {\\n    if (auth[msg.sender] != 1) {\\n      revert NotAuthorized();\\n    }\\n    _;\\n  }\\n\\n  /// @dev Checks is the contract live\\n  modifier onlyLive() {\\n    if (live == 0) {\\n      revert NotLive();\\n    }\\n    _;\\n  }\\n\\n  // --- admin\\n\\n  /// @dev Toggles the contract live flag\\n  function toggle() external authorized {\\n    if (live == 1) {\\n      live = 0;\\n    } else {\\n      live = 1;\\n    }\\n    emit Live(live);\\n  }\\n\\n  /// @dev Adds authorized party\\n  function rely(address party) external authorized {\\n    auth[party] = 1;\\n    emit Rely(party);\\n  }\\n\\n  /// @dev Removes authorized party\\n  function deny(address party) external authorized {\\n    auth[party] = 0;\\n    emit Deny(party);\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb90e97de9f804b5eb380e9dee4a419d55463f7760ccf9ee703d93776e290e4f4\",\"license\":\"GPL-3.0-only\"},\"contracts/WinPay.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {Manageable} from './Manageable.sol';\\nimport {Permit} from './libraries/Permit.sol';\\nimport {AssetLike, WrappedErc20Like, LedgerLike} from './interfaces/Common.sol';\\n\\ncontract WinPay is Manageable {\\n  enum State {\\n    UNINITIALIZED,\\n    PAID,\\n    REFUNDED\\n  }\\n\\n  struct DealStorage {\\n    bytes32 provider;\\n    address customer;\\n    address asset;\\n    uint256 value;\\n    State state;\\n  }\\n\\n  /// @dev Reference to Ledger contract\\n  LedgerLike public ledger;\\n\\n  /// @dev Service providers registry\\n  mapping(bytes32 => address) public providers; // provider => EOA\\n\\n  /// @dev Deals registry\\n  mapping(bytes32 => DealStorage) public deals; // serviceId => DealStorage\\n\\n  // -- errors\\n\\n  /// @dev Throws when provider is already registered\\n  error ProviderExists();\\n\\n  /// @dev Throws when provider not found\\n  error ProviderNotFound(bytes32 provider);\\n\\n  /// @dev Throws when the deal is already initialized\\n  error DealExists(bytes32 serviceId);\\n\\n  /// @dev Throws when the deal not found\\n  error DealNotFound(bytes32 serviceId);\\n\\n  /// @dev Throws when the deal is expired\\n  error DealExpired(bytes32 serviceId, uint256 expiry);\\n\\n  /// @dev Throws when the deal is already refunded\\n  error DealAlreadyRefunded(bytes32 serviceId);\\n\\n  /// @dev Throws when invalid value provided\\n  error InvalidValue();\\n\\n  /// @dev Throws when balance not enough for payment\\n  error BalanceNotEnough();\\n\\n  // -- events\\n\\n  /// @dev Emitted when the provider is registered or changed\\n  event Provider(bytes32 provider, address wallet);\\n\\n  /// @dev Emitted when deal is occurred\\n  event Deal(bytes32 provider, bytes32 serviceId);\\n\\n  /// @dev Emitted when deal is refunded\\n  event Refund(bytes32 provider, bytes32 serviceId);\\n\\n  constructor(address _ledger) {\\n    auth[msg.sender] = 1;\\n    live = 1;\\n    ledger = LedgerLike(_ledger);\\n    emit Rely(msg.sender);\\n  }\\n\\n  /// @dev Register a new provider\\n  /// @param provider Unique provider Id\\n  /// @param wallet Provider's wallet\\n  function register(bytes32 provider, address wallet) external onlyLive {\\n    if (providers[provider] != address(0)) {\\n      revert ProviderExists();\\n    }\\n    providers[provider] = wallet;\\n    emit Provider(provider, wallet);\\n  }\\n\\n  /// @dev Update the provider\\n  /// @param provider Unique provider Id\\n  /// @param wallet Provider's wallet\\n  function updateProvider(bytes32 provider, address wallet) external onlyLive {\\n    if (msg.sender != providers[provider]) {\\n      revert NotAuthorized();\\n    }\\n    providers[provider] = wallet;\\n    emit Provider(provider, wallet);\\n  }\\n\\n  // --- deals\\n\\n  /// @dev Makes a deal\\n  /// @param provider Unique provider Id\\n  /// @param serviceId Unique service Id\\n  /// @param expiry The timestamp at which the deal is no longer valid\\n  /// @param asset The address of the proper Asset implementation\\n  /// @param permit Data required for making of payment with tokens using permit\\n  function _deal(\\n    bytes32 provider,\\n    bytes32 serviceId,\\n    uint256 expiry,\\n    address asset,\\n    uint256 value,\\n    Permit.EIP2612Permit memory permit\\n  ) internal onlyLive {\\n    // make sure provider registered\\n    if (providers[provider] == address(0)) {\\n      revert ProviderNotFound(provider);\\n    }\\n\\n    DealStorage storage dealStorage = deals[serviceId];\\n\\n    // make sure the deal has not been created before\\n    if (dealStorage.state != State.UNINITIALIZED) {\\n      revert DealExists(serviceId);\\n    }\\n\\n    // make sure the deal is not expired\\n    if (expiry < block.timestamp) {\\n      revert DealExpired(serviceId, expiry);\\n    }\\n\\n    AssetLike assetInstance = AssetLike(asset);\\n    address assetAddress = assetInstance.asset();\\n\\n    // when asset is `wrapped` we should try to `wrap` native tokens\\n    if (assetInstance.wrapped() > 0 && msg.value > 0) {\\n      if (msg.value != value) {\\n        revert InvalidValue();\\n      }\\n      assetInstance.joinWrapped{value: msg.value}(providers[provider], value);\\n    } else if (permit.owner != address(0)) {\\n      // we have a permission from the customer, so, use it\\n      assetInstance.join(msg.sender, providers[provider], value, permit);\\n    } else {\\n      // normal asset joining\\n      assetInstance.join(msg.sender, providers[provider], value);\\n    }\\n\\n    dealStorage.provider = provider;\\n    dealStorage.customer = msg.sender;\\n    dealStorage.asset = assetAddress;\\n    dealStorage.value = value;\\n    dealStorage.state = State.PAID;\\n\\n    emit Deal(provider, serviceId);\\n  }\\n\\n  // `deal` version without `permit` functionality\\n  function deal(\\n    bytes32 provider,\\n    bytes32 serviceId,\\n    uint256 expiry,\\n    address asset,\\n    uint256 value\\n  ) external payable onlyLive {\\n    _deal(provider, serviceId, expiry, asset, value, Permit.EIP2612Permit(address(0), 0, 0, bytes32(0), bytes32(0)));\\n  }\\n\\n  // `deal` version with `permit`\\n  function deal(\\n    bytes32 provider,\\n    bytes32 serviceId,\\n    uint256 expiry,\\n    address asset,\\n    uint256 value,\\n    Permit.EIP2612Permit memory permit\\n  ) external onlyLive {\\n    _deal(provider, serviceId, expiry, asset, value, permit);\\n  }\\n\\n  /// @dev Refunds a deal\\n  /// @param serviceId Unique service Id\\n  /// @param asset The Asset contract reference\\n  function refund(bytes32 serviceId, address asset) external onlyLive {\\n    DealStorage storage dealStorage = deals[serviceId];\\n\\n    // make sure the deal is exists\\n    if (dealStorage.state == State.UNINITIALIZED) {\\n      revert DealNotFound(serviceId);\\n    }\\n\\n    // make sure function called by the proper provider\\n    if (msg.sender != providers[dealStorage.provider]) {\\n      revert NotAuthorized();\\n    }\\n\\n    // make sure the deal has not been refunded\\n    if (dealStorage.state == State.REFUNDED) {\\n      revert DealAlreadyRefunded(serviceId);\\n    }\\n\\n    // check provider's balance\\n    if (ledger.balances(providers[dealStorage.provider], dealStorage.asset) < dealStorage.value) {\\n      revert BalanceNotEnough();\\n    }\\n\\n    // finalize the deal state\\n    dealStorage.state = State.REFUNDED;\\n\\n    // take funds from the providers' account to the WinPay contract\\n    ledger.move(providers[dealStorage.provider], address(this), dealStorage.asset, dealStorage.value);\\n    // ...and send them to the customer\\n    AssetLike(asset).exit(dealStorage.customer, dealStorage.value);\\n\\n    emit Refund(dealStorage.provider, serviceId);\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x243e2589829b7821a2c1b42900e68c5d774b7c00148133afd9235ca2f0333559\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/Common.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {Permit} from '../libraries/Permit.sol';\\n\\ninterface LedgerLike {\\n  function balances(address dst, address asset) external returns (uint256);\\n\\n  function add(\\n    address,\\n    address,\\n    int256\\n  ) external;\\n\\n  function move(\\n    address src,\\n    address dst,\\n    address asset,\\n    uint256 value\\n  ) external;\\n}\\n\\ninterface Erc20Like {\\n  function decimals() external view returns (uint256);\\n\\n  function transfer(address, uint256) external returns (bool);\\n\\n  function transferFrom(\\n    address,\\n    address,\\n    uint256\\n  ) external returns (bool);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\\ninterface WrappedErc20Like is Erc20Like {\\n  function balanceOf(address) external returns (uint256);\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\\ninterface AssetLike {\\n  function ledger() external returns (address);\\n\\n  function asset() external returns (address);\\n\\n  function wrapped() external returns (uint256);\\n\\n  function join(address dst, uint256 value) external;\\n\\n  function join(\\n    address src,\\n    address dst,\\n    uint256 value\\n  ) external;\\n\\n  function join(\\n    address src,\\n    address dst,\\n    uint256 value,\\n    Permit.EIP2612Permit memory permit\\n  ) external;\\n\\n  function joinWrapped(address dst, uint256 value) external payable;\\n\\n  function exit(address dst, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x68cb6ae9569d47414db6a833e73d38892f8c46722244c2a08be9f6998b090bce\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nlibrary Permit {\\n  struct EIP2612Permit {\\n    address owner;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n}\\n\",\"keccak256\":\"0xdb44faa5762bf9d8033a50f81040f9a922ed5b415a90bc85deef6ce9713dcd66\",\"license\":\"GPL-3.0-only\"},\"contracts/upgradeable/Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nabstract contract Upgradeable {\\n  address public upgrader;\\n\\n  /// @dev Throws when function called not by upgrader\\n  error NotUpgrader();\\n\\n  /// @dev Checks is the caller is upgrader\\n  modifier onlyUpgrader() {\\n    if (upgrader == address(0)) {\\n      upgrader = msg.sender;\\n    }\\n    if (msg.sender != upgrader) {\\n      revert NotUpgrader();\\n    }\\n    _;\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd2af52add71b029d9a17e22cbac85e5b052de945fc42636e2802e10e6045b107\",\"license\":\"GPL-3.0-only\"},\"contracts/upgradeable/WinPayUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.13;\\n\\nimport {WinPay} from '../WinPay.sol';\\nimport {Upgradeable} from './Upgradeable.sol';\\nimport {LedgerLike} from '../interfaces/Common.sol';\\n\\ncontract WinPayUpgradeable is Upgradeable, WinPay {\\n  constructor(address _ledger) WinPay(_ledger) {}\\n\\n  function postUpgrade(address _ledger) public onlyUpgrader {\\n    auth[msg.sender] = 1;\\n    live = 1;\\n    ledger = LedgerLike(_ledger);\\n    emit Rely(msg.sender);\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x2176a5006443ecf2e1f01f806860f26d90ebd42a5e6dbfc6f5ad8cace54c65da\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516111bb3803806111bb83398101604081905261002f9161009f565b33600081815260346020908152604091829020600190819055603355606780546001600160a01b0319166001600160a01b038616179055905191825282917fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60910160405180910390a150506100cf565b6000602082840312156100b157600080fd5b81516001600160a01b03811681146100c857600080fd5b9392505050565b6110dd806100de6000396000f3fe6080604052600436106100e85760003560e01c8063957aa58c1161008a578063c79b243011610059578063c79b2430146102b8578063cd5d2118146102d8578063d22057a914610305578063f0864e371461032557600080fd5b8063957aa58c146102415780639c52a7f1146102655780639d687fff14610285578063af2697451461029857600080fd5b806356397c35116100c657806356397c351461017757806365fae35e1461019757806378301357146101b757806381cd872a146101d757600080fd5b80631acc050e146100ed57806340a3d2461461014057806345b4032c14610157575b600080fd5b3480156100f957600080fd5b50610123610108366004610e41565b6068602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b50610155610345565b005b34801561016357600080fd5b50610155610172366004610e82565b6103cc565b34801561018357600080fd5b50606754610123906001600160a01b031681565b3480156101a357600080fd5b506101556101b2366004610eb2565b6106b3565b3480156101c357600080fd5b506101556101d2366004610ee7565b610737565b3480156101e357600080fd5b506102306101f2366004610e41565b6069602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b0392831693929091169160ff1685565b604051610137959493929190610fd5565b34801561024d57600080fd5b5061025760335481565b604051908152602001610137565b34801561027157600080fd5b50610155610280366004610eb2565b610770565b610155610293366004611028565b6107ec565b3480156102a457600080fd5b50600054610123906001600160a01b031681565b3480156102c457600080fd5b506101556102d3366004610eb2565b61085f565b3480156102e457600080fd5b506102576102f3366004610eb2565b60346020526000908152604090205481565b34801561031157600080fd5b50610155610320366004610e82565b610911565b34801561033157600080fd5b50610155610340366004610e82565b6109d0565b336000908152603460205260409020546001146103755760405163ea8e4eb560e01b815260040160405180910390fd5b60335460010361038957600060335561038f565b60016033555b7f6b00bc0a71d2071ceffc66d2746ca7c3b550c2d5115a690a8761f81f04e2cf806033546040516103c291815260200190565b60405180910390a1565b6033546000036103ef5760405163baf13b3f60e01b815260040160405180910390fd5b600082815260696020526040812090600482015460ff16600281111561041757610417610fbf565b0361043d57604051637133e9eb60e01b8152600481018490526024015b60405180910390fd5b80546000908152606860205260409020546001600160a01b031633146104765760405163ea8e4eb560e01b815260040160405180910390fd5b6002600482015460ff16600281111561049157610491610fbf565b036104b25760405163bc94dc0f60e01b815260048101849052602401610434565b6003810154606754825460009081526068602052604090819020546002850154915163c23f001f60e01b81526001600160a01b03918216600482015291811660248301529091169063c23f001f906044016020604051808303816000875af1158015610522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190611071565b101561056557604051639882883560e01b815260040160405180910390fd5b6004818101805460ff191660029081179091556067548354600090815260686020526040908190205492850154600386015491516307ae82ff60e31b81526001600160a01b03948516958101959095523060248601528316604485015260648401521690633d7417f890608401600060405180830381600087803b1580156105ec57600080fd5b505af1158015610600573d6000803e3d6000fd5b505050506001810154600382015460405163ef693bed60e01b81526001600160a01b03928316600482015260248101919091529083169063ef693bed90604401600060405180830381600087803b15801561065a57600080fd5b505af115801561066e573d6000803e3d6000fd5b5050825460408051918252602082018790527fd769f3db95cced208cb97e049a13528dc3aa9be18020109fd955608742c8e941935001905060405180910390a1505050565b336000908152603460205260409020546001146106e35760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166000818152603460209081526040918290206001905590519182527fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091015b60405180910390a150565b60335460000361075a5760405163baf13b3f60e01b815260040160405180910390fd5b610768868686868686610a2a565b505050505050565b336000908152603460205260409020546001146107a05760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b03811660008181526034602090815260408083209290925590519182527f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b910161072c565b60335460000361080f5760405163baf13b3f60e01b815260040160405180910390fd5b61085885858585856040518060a0016040528060006001600160a01b0316815260200160008152602001600060ff1681526020016000801b81526020016000801b815250610a2a565b5050505050565b6000546001600160a01b031661088257600080546001600160a01b031916331790555b6000546001600160a01b031633146108ad5760405163520ba28160e11b815260040160405180910390fd5b33600081815260346020908152604091829020600190819055603355606780546001600160a01b0319166001600160a01b03861617905590519182527fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60910161072c565b6033546000036109345760405163baf13b3f60e01b815260040160405180910390fd5b6000828152606860205260409020546001600160a01b03161561096a576040516317a6dc5160e11b815260040160405180910390fd5b60008281526068602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251858152918201527f4b0ac2c1aee933d7f183aa8345922abbeca75e05a694849d3078f9a6a030ebec910160405180910390a15050565b6033546000036109f35760405163baf13b3f60e01b815260040160405180910390fd5b6000828152606860205260409020546001600160a01b0316331461096a5760405163ea8e4eb560e01b815260040160405180910390fd5b603354600003610a4d5760405163baf13b3f60e01b815260040160405180910390fd5b6000868152606860205260409020546001600160a01b0316610a845760405162b4805560e71b815260048101879052602401610434565b600085815260696020526040812090600482015460ff166002811115610aac57610aac610fbf565b14610acd5760405163b3e2817b60e01b815260048101879052602401610434565b42851015610af857604051631c9b4cf760e31b81526004810187905260248101869052604401610434565b60008490506000816001600160a01b03166338d52e0f6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b63919061108a565b90506000826001600160a01b03166350e70d486040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb9190611071565b118015610bd85750600034115b15610c7757843414610bfd57604051632a9ffab760e21b815260040160405180910390fd5b6000898152606860205260409081902054905163063871bf60e21b81526001600160a01b03918216600482015260248101879052908316906318e1c6fc9034906044016000604051808303818588803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b5050505050610db4565b83516001600160a01b031615610d3a57600089815260686020908152604091829020548251632f1e6f4760e01b81523360048201526001600160a01b039182166024820152604481018990528751821660648201529187015160848301529186015160ff1660a4820152606086015160c4820152608086015160e482015290831690632f1e6f479061010401600060405180830381600087803b158015610d1d57600080fd5b505af1158015610d31573d6000803e3d6000fd5b50505050610db4565b60008981526068602052604090819020549051639f6c3dbd60e01b81523360048201526001600160a01b0391821660248201526044810187905290831690639f6c3dbd90606401600060405180830381600087803b158015610d9b57600080fd5b505af1158015610daf573d6000803e3d6000fd5b505050505b88835560018084018054336001600160a01b0319918216179091556002850180549091166001600160a01b0384161790556003840186905560048401805460ff191682800217905550604080518a8152602081018a90527f9324705bbaa3343b83902fe0e1522b6a974766901cde2cc9cff24465120b9933910160405180910390a1505050505050505050565b600060208284031215610e5357600080fd5b5035919050565b6001600160a01b0381168114610e6f57600080fd5b50565b8035610e7d81610e5a565b919050565b60008060408385031215610e9557600080fd5b823591506020830135610ea781610e5a565b809150509250929050565b600060208284031215610ec457600080fd5b8135610ecf81610e5a565b9392505050565b803560ff81168114610e7d57600080fd5b600080600080600080868803610140811215610f0257600080fd5b8735965060208801359550604088013594506060880135610f2281610e5a565b93506080880135925060a0609f1982011215610f3d57600080fd5b5060405160a0810181811067ffffffffffffffff82111715610f6f57634e487b7160e01b600052604160045260246000fd5b604052610f7e60a08901610e72565b815260c08801356020820152610f9660e08901610ed6565b604082015261010088013560608201526101208801356080820152809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b8581526001600160a01b038581166020830152841660408201526060810183905260a081016003831061101857634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b600080600080600060a0868803121561104057600080fd5b853594506020860135935060408601359250606086013561106081610e5a565b949793965091946080013592915050565b60006020828403121561108357600080fd5b5051919050565b60006020828403121561109c57600080fd5b8151610ecf81610e5a56fea26469706673582212200b77cb11b60dd06db6337c10fb4a31123e103483a1768f4d3ccdb224d567f83f64736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063957aa58c1161008a578063c79b243011610059578063c79b2430146102b8578063cd5d2118146102d8578063d22057a914610305578063f0864e371461032557600080fd5b8063957aa58c146102415780639c52a7f1146102655780639d687fff14610285578063af2697451461029857600080fd5b806356397c35116100c657806356397c351461017757806365fae35e1461019757806378301357146101b757806381cd872a146101d757600080fd5b80631acc050e146100ed57806340a3d2461461014057806345b4032c14610157575b600080fd5b3480156100f957600080fd5b50610123610108366004610e41565b6068602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014c57600080fd5b50610155610345565b005b34801561016357600080fd5b50610155610172366004610e82565b6103cc565b34801561018357600080fd5b50606754610123906001600160a01b031681565b3480156101a357600080fd5b506101556101b2366004610eb2565b6106b3565b3480156101c357600080fd5b506101556101d2366004610ee7565b610737565b3480156101e357600080fd5b506102306101f2366004610e41565b6069602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b0392831693929091169160ff1685565b604051610137959493929190610fd5565b34801561024d57600080fd5b5061025760335481565b604051908152602001610137565b34801561027157600080fd5b50610155610280366004610eb2565b610770565b610155610293366004611028565b6107ec565b3480156102a457600080fd5b50600054610123906001600160a01b031681565b3480156102c457600080fd5b506101556102d3366004610eb2565b61085f565b3480156102e457600080fd5b506102576102f3366004610eb2565b60346020526000908152604090205481565b34801561031157600080fd5b50610155610320366004610e82565b610911565b34801561033157600080fd5b50610155610340366004610e82565b6109d0565b336000908152603460205260409020546001146103755760405163ea8e4eb560e01b815260040160405180910390fd5b60335460010361038957600060335561038f565b60016033555b7f6b00bc0a71d2071ceffc66d2746ca7c3b550c2d5115a690a8761f81f04e2cf806033546040516103c291815260200190565b60405180910390a1565b6033546000036103ef5760405163baf13b3f60e01b815260040160405180910390fd5b600082815260696020526040812090600482015460ff16600281111561041757610417610fbf565b0361043d57604051637133e9eb60e01b8152600481018490526024015b60405180910390fd5b80546000908152606860205260409020546001600160a01b031633146104765760405163ea8e4eb560e01b815260040160405180910390fd5b6002600482015460ff16600281111561049157610491610fbf565b036104b25760405163bc94dc0f60e01b815260048101849052602401610434565b6003810154606754825460009081526068602052604090819020546002850154915163c23f001f60e01b81526001600160a01b03918216600482015291811660248301529091169063c23f001f906044016020604051808303816000875af1158015610522573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105469190611071565b101561056557604051639882883560e01b815260040160405180910390fd5b6004818101805460ff191660029081179091556067548354600090815260686020526040908190205492850154600386015491516307ae82ff60e31b81526001600160a01b03948516958101959095523060248601528316604485015260648401521690633d7417f890608401600060405180830381600087803b1580156105ec57600080fd5b505af1158015610600573d6000803e3d6000fd5b505050506001810154600382015460405163ef693bed60e01b81526001600160a01b03928316600482015260248101919091529083169063ef693bed90604401600060405180830381600087803b15801561065a57600080fd5b505af115801561066e573d6000803e3d6000fd5b5050825460408051918252602082018790527fd769f3db95cced208cb97e049a13528dc3aa9be18020109fd955608742c8e941935001905060405180910390a1505050565b336000908152603460205260409020546001146106e35760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b0381166000818152603460209081526040918290206001905590519182527fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091015b60405180910390a150565b60335460000361075a5760405163baf13b3f60e01b815260040160405180910390fd5b610768868686868686610a2a565b505050505050565b336000908152603460205260409020546001146107a05760405163ea8e4eb560e01b815260040160405180910390fd5b6001600160a01b03811660008181526034602090815260408083209290925590519182527f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b910161072c565b60335460000361080f5760405163baf13b3f60e01b815260040160405180910390fd5b61085885858585856040518060a0016040528060006001600160a01b0316815260200160008152602001600060ff1681526020016000801b81526020016000801b815250610a2a565b5050505050565b6000546001600160a01b031661088257600080546001600160a01b031916331790555b6000546001600160a01b031633146108ad5760405163520ba28160e11b815260040160405180910390fd5b33600081815260346020908152604091829020600190819055603355606780546001600160a01b0319166001600160a01b03861617905590519182527fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60910161072c565b6033546000036109345760405163baf13b3f60e01b815260040160405180910390fd5b6000828152606860205260409020546001600160a01b03161561096a576040516317a6dc5160e11b815260040160405180910390fd5b60008281526068602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251858152918201527f4b0ac2c1aee933d7f183aa8345922abbeca75e05a694849d3078f9a6a030ebec910160405180910390a15050565b6033546000036109f35760405163baf13b3f60e01b815260040160405180910390fd5b6000828152606860205260409020546001600160a01b0316331461096a5760405163ea8e4eb560e01b815260040160405180910390fd5b603354600003610a4d5760405163baf13b3f60e01b815260040160405180910390fd5b6000868152606860205260409020546001600160a01b0316610a845760405162b4805560e71b815260048101879052602401610434565b600085815260696020526040812090600482015460ff166002811115610aac57610aac610fbf565b14610acd5760405163b3e2817b60e01b815260048101879052602401610434565b42851015610af857604051631c9b4cf760e31b81526004810187905260248101869052604401610434565b60008490506000816001600160a01b03166338d52e0f6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610b3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b63919061108a565b90506000826001600160a01b03166350e70d486040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb9190611071565b118015610bd85750600034115b15610c7757843414610bfd57604051632a9ffab760e21b815260040160405180910390fd5b6000898152606860205260409081902054905163063871bf60e21b81526001600160a01b03918216600482015260248101879052908316906318e1c6fc9034906044016000604051808303818588803b158015610c5957600080fd5b505af1158015610c6d573d6000803e3d6000fd5b5050505050610db4565b83516001600160a01b031615610d3a57600089815260686020908152604091829020548251632f1e6f4760e01b81523360048201526001600160a01b039182166024820152604481018990528751821660648201529187015160848301529186015160ff1660a4820152606086015160c4820152608086015160e482015290831690632f1e6f479061010401600060405180830381600087803b158015610d1d57600080fd5b505af1158015610d31573d6000803e3d6000fd5b50505050610db4565b60008981526068602052604090819020549051639f6c3dbd60e01b81523360048201526001600160a01b0391821660248201526044810187905290831690639f6c3dbd90606401600060405180830381600087803b158015610d9b57600080fd5b505af1158015610daf573d6000803e3d6000fd5b505050505b88835560018084018054336001600160a01b0319918216179091556002850180549091166001600160a01b0384161790556003840186905560048401805460ff191682800217905550604080518a8152602081018a90527f9324705bbaa3343b83902fe0e1522b6a974766901cde2cc9cff24465120b9933910160405180910390a1505050505050505050565b600060208284031215610e5357600080fd5b5035919050565b6001600160a01b0381168114610e6f57600080fd5b50565b8035610e7d81610e5a565b919050565b60008060408385031215610e9557600080fd5b823591506020830135610ea781610e5a565b809150509250929050565b600060208284031215610ec457600080fd5b8135610ecf81610e5a565b9392505050565b803560ff81168114610e7d57600080fd5b600080600080600080868803610140811215610f0257600080fd5b8735965060208801359550604088013594506060880135610f2281610e5a565b93506080880135925060a0609f1982011215610f3d57600080fd5b5060405160a0810181811067ffffffffffffffff82111715610f6f57634e487b7160e01b600052604160045260246000fd5b604052610f7e60a08901610e72565b815260c08801356020820152610f9660e08901610ed6565b604082015261010088013560608201526101208801356080820152809150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b8581526001600160a01b038581166020830152841660408201526060810183905260a081016003831061101857634e487b7160e01b600052602160045260246000fd5b8260808301529695505050505050565b600080600080600060a0868803121561104057600080fd5b853594506020860135935060408601359250606086013561106081610e5a565b949793965091946080013592915050565b60006020828403121561108357600080fd5b5051919050565b60006020828403121561109c57600080fd5b8151610ecf81610e5a56fea26469706673582212200b77cb11b60dd06db6337c10fb4a31123e103483a1768f4d3ccdb224d567f83f64736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "BalanceNotEnough()": [
        {
          "details": "Throws when balance not enough for payment"
        }
      ],
      "DealAlreadyRefunded(bytes32)": [
        {
          "details": "Throws when the deal is already refunded"
        }
      ],
      "DealExists(bytes32)": [
        {
          "details": "Throws when the deal is already initialized"
        }
      ],
      "DealExpired(bytes32,uint256)": [
        {
          "details": "Throws when the deal is expired"
        }
      ],
      "DealNotFound(bytes32)": [
        {
          "details": "Throws when the deal not found"
        }
      ],
      "InvalidValue()": [
        {
          "details": "Throws when invalid value provided"
        }
      ],
      "NotAuthorized()": [
        {
          "details": "Throws when action is not authorized"
        }
      ],
      "NotLive()": [
        {
          "details": "Throws if the contract called when it is not live"
        }
      ],
      "NotUpgrader()": [
        {
          "details": "Throws when function called not by upgrader"
        }
      ],
      "ProviderExists()": [
        {
          "details": "Throws when provider is already registered"
        }
      ],
      "ProviderNotFound(bytes32)": [
        {
          "details": "Throws when provider not found"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "deny(address)": {
        "details": "Removes authorized party"
      },
      "refund(bytes32,address)": {
        "details": "Refunds a deal",
        "params": {
          "asset": "The Asset contract reference",
          "serviceId": "Unique service Id"
        }
      },
      "register(bytes32,address)": {
        "details": "Register a new provider",
        "params": {
          "provider": "Unique provider Id",
          "wallet": "Provider's wallet"
        }
      },
      "rely(address)": {
        "details": "Adds authorized party"
      },
      "toggle()": {
        "details": "Toggles the contract live flag"
      },
      "updateProvider(bytes32,address)": {
        "details": "Update the provider",
        "params": {
          "provider": "Unique provider Id",
          "wallet": "Provider's wallet"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1584,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "upgrader",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1618,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 576,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "live",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 581,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "auth",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 698,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 731,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "ledger",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(LedgerLike)1291"
      },
      {
        "astId": 736,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "providers",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 742,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "deals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_bytes32,t_struct(DealStorage)727_storage)"
      },
      {
        "astId": 1256,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1674,
        "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LedgerLike)1291": {
        "encoding": "inplace",
        "label": "contract LedgerLike",
        "numberOfBytes": "20"
      },
      "t_enum(State)715": {
        "encoding": "inplace",
        "label": "enum WinPay.State",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(DealStorage)727_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct WinPay.DealStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(DealStorage)727_storage"
      },
      "t_struct(DealStorage)727_storage": {
        "encoding": "inplace",
        "label": "struct WinPay.DealStorage",
        "members": [
          {
            "astId": 717,
            "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
            "label": "provider",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 719,
            "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
            "label": "customer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 721,
            "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
            "label": "asset",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 723,
            "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
            "label": "value",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 726,
            "contract": "contracts/upgradeable/WinPayUpgradeable.sol:WinPayUpgradeable",
            "label": "state",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(State)715"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}